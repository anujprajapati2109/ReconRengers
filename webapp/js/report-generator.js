// Advanced Report Generator for AnujScan Pro
const ReportGenerator = {
    currentScanData: null,
    
    setScanData(scanType, findings, target) {
        this.currentScanData = {
            scanType,
            findings,
            target,
            timestamp: new Date(),
            scanId: Date.now().toString()
        };
    },

    generateDetailedSummary() {
        if (!this.currentScanData) {
            showAlert('No scan data available for report generation', 'error');
            return;
        }

        const data = this.currentScanData;
        const report = this.createDetailedReport(data);
        
        this.showReportModal('Detailed Security Summary', report, 'detailed-summary');
    },

    generateSecuritySummary() {
        if (!this.currentScanData) {
            showAlert('No scan data available for report generation', 'error');
            return;
        }

        const data = this.currentScanData;
        const report = this.createSecurityReport(data);
        
        this.showReportModal('Executive Security Summary', report, 'security-summary');
    },

    createDetailedReport(data) {
        const { scanType, findings, target, timestamp } = data;
        
        return `
ANUJSCAN PRO ULTIMATE - DETAILED SECURITY SUMMARY
================================================================

SCAN INFORMATION
----------------
Target: ${target}
Scan Type: ${scanType.toUpperCase()} RECONNAISSANCE
Date & Time: ${timestamp.toLocaleString()}
Scan Duration: Completed Successfully
Total Findings: ${findings.length}

EXECUTIVE SUMMARY
-----------------
This comprehensive security assessment was conducted on ${target} using ${scanType} reconnaissance techniques. The scan identified ${findings.length} security-related items that require attention and analysis.

FINDINGS BREAKDOWN
------------------
${this.generateFindingsBreakdown(findings)}

DETAILED FINDINGS
-----------------
${this.generateDetailedFindings(findings, scanType)}

RISK ASSESSMENT
---------------
${this.generateRiskAssessment(findings)}

RECOMMENDATIONS
---------------
${this.generateRecommendations(scanType, findings)}

NEXT STEPS
----------
1. Review all HIGH and CRITICAL findings immediately
2. Implement recommended security controls
3. Schedule follow-up scans in 30 days
4. Update security policies based on findings
5. Train team on identified vulnerabilities

TECHNICAL DETAILS
-----------------
Scan Engine: AnujScan Pro Ultimate v3.0
Methodology: ${scanType === 'passive' ? 'OSINT & Passive Reconnaissance' : 'Active Security Assessment'}
Compliance: Follows OWASP Testing Guidelines
Report Generated: ${new Date().toLocaleString()}

================================================================
This report is confidential and intended for authorized personnel only.
Generated by AnujScan Pro Ultimate - Advanced Cybersecurity Suite
================================================================
        `;
    },

    createSecurityReport(data) {
        const { scanType, findings, target, timestamp } = data;
        
        return `
ANUJSCAN PRO ULTIMATE - EXECUTIVE SECURITY SUMMARY
==================================================

TO: Security Team / Management
FROM: AnujScan Pro Security Assessment
DATE: ${timestamp.toLocaleDateString()}
RE: Security Assessment Results for ${target}

EXECUTIVE OVERVIEW
------------------
A comprehensive security assessment was conducted on ${target} to identify potential vulnerabilities and security gaps. This report summarizes the key findings and provides actionable recommendations.

ASSESSMENT SCOPE
----------------
• Target System: ${target}
• Assessment Type: ${scanType.toUpperCase()} Security Scan
• Date Conducted: ${timestamp.toLocaleDateString()}
• Assessment Duration: Complete
• Tools Used: AnujScan Pro Ultimate Suite

KEY FINDINGS SUMMARY
--------------------
${this.generateExecutiveSummary(findings)}

SECURITY POSTURE ANALYSIS
-------------------------
${this.generateSecurityPosture(findings)}

CRITICAL AREAS IDENTIFIED
-------------------------
${this.generateCriticalAreas(findings, scanType)}

WHERE VULNERABILITIES WERE FOUND
--------------------------------
${this.generateLocationAnalysis(findings, scanType)}

BUSINESS IMPACT ASSESSMENT
--------------------------
${this.generateBusinessImpact(findings)}

IMMEDIATE ACTION ITEMS
----------------------
${this.generateActionItems(findings)}

COMPLIANCE CONSIDERATIONS
-------------------------
• Review findings against industry standards (ISO 27001, NIST)
• Ensure compliance with data protection regulations
• Document remediation efforts for audit purposes
• Update security policies and procedures

CONCLUSION
----------
${this.generateConclusion(findings, scanType)}

APPENDIX
--------
Detailed technical findings available in separate technical report.
For questions regarding this assessment, contact the security team.

==================================================
Report Classification: CONFIDENTIAL
Generated by: AnujScan Pro Ultimate v3.0
Report ID: ${data.scanId}
==================================================
        `;
    },

    generateFindingsBreakdown(findings) {
        const critical = findings.filter(f => f.impact === 'Critical').length;
        const high = findings.filter(f => f.impact === 'High').length;
        const medium = findings.filter(f => f.impact === 'Medium').length;
        const low = findings.filter(f => f.impact === 'Low').length;

        return `
• CRITICAL: ${critical} findings requiring immediate attention
• HIGH: ${high} findings requiring prompt remediation
• MEDIUM: ${medium} findings for planned remediation
• LOW: ${low} informational findings for awareness
        `;
    },

    generateDetailedFindings(findings, scanType) {
        let report = '';
        findings.forEach((finding, index) => {
            report += `
${index + 1}. ${finding.type || 'Security Finding'}
   Severity: ${finding.impact || 'Medium'}
   Source: ${finding.source || scanType}
   Description: ${this.getDetailedDescription(finding, scanType)}
   Location: ${this.getLocationInfo(finding, scanType)}
   Recommendation: ${this.getRecommendation(finding)}
   
`;
        });
        return report;
    },

    generateRiskAssessment(findings) {
        const totalFindings = findings.length;
        const criticalCount = findings.filter(f => f.impact === 'Critical').length;
        
        let riskLevel = 'LOW';
        if (criticalCount > 0) riskLevel = 'CRITICAL';
        else if (totalFindings > 10) riskLevel = 'HIGH';
        else if (totalFindings > 5) riskLevel = 'MEDIUM';

        return `
Overall Risk Level: ${riskLevel}

Risk Factors:
• ${totalFindings} total security findings identified
• ${criticalCount} critical vulnerabilities requiring immediate action
• Attack surface analysis reveals multiple potential entry points
• Recommended risk mitigation timeline: ${this.getTimelineRecommendation(riskLevel)}
        `;
    },

    generateRecommendations(scanType, findings) {
        const recommendations = [
            '• Implement Web Application Firewall (WAF) for protection',
            '• Enable comprehensive logging and monitoring',
            '• Conduct regular security assessments',
            '• Update and patch all identified vulnerabilities',
            '• Implement network segmentation where applicable',
            '• Enhance access controls and authentication mechanisms',
            '• Develop incident response procedures',
            '• Provide security awareness training to staff'
        ];

        if (scanType === 'active') {
            recommendations.push('• Review and harden network configurations');
            recommendations.push('• Implement intrusion detection systems');
        }

        return recommendations.join('\n');
    },

    generateExecutiveSummary(findings) {
        const total = findings.length;
        const critical = findings.filter(f => f.impact === 'Critical').length;
        const high = findings.filter(f => f.impact === 'High').length;
        const medium = findings.filter(f => f.impact === 'Medium').length;
        
        let summary = `FINDINGS SUMMARY: ${total} total security findings identified\n`;
        summary += `• Critical: ${critical} (immediate action required)\n`;
        summary += `• High: ${high} (address within 1-2 weeks)\n`;
        summary += `• Medium: ${medium} (plan remediation within 30 days)\n\n`;
        
        if (critical > 0) {
            summary += `⚠️ IMMEDIATE ATTENTION REQUIRED: ${critical} critical security issues found.\n\n`;
            summary += 'CRITICAL FINDINGS LOCATIONS:\n';
            const criticalFindings = findings.filter(f => f.impact === 'Critical');
            criticalFindings.forEach((finding, index) => {
                summary += `${index + 1}. ${finding.message || finding.type}\n`;
                summary += `   Found via: ${finding.source || 'Unknown'}\n`;
            });
        } else if (high > 0) {
            summary += `📊 HIGH PRIORITY ITEMS: ${high} high-risk findings require attention.`;
        } else if (total > 0) {
            summary += `✅ MANAGEABLE SECURITY POSTURE: Most findings are informational.`;
        } else {
            summary += `🎯 STRONG SECURITY POSTURE: No significant issues identified.`;
        }
        
        return summary;
    },

    generateSecurityPosture(findings) {
        const score = Math.max(0, 100 - (findings.length * 5));
        return `
Current Security Score: ${score}/100
Security Maturity Level: ${score > 80 ? 'Advanced' : score > 60 ? 'Intermediate' : 'Basic'}
Improvement Potential: ${100 - score} points available through remediation
        `;
    },

    generateCriticalAreas(findings, scanType) {
        const areas = [
            'Network Security: Port exposure and service configuration',
            'Web Application Security: Input validation and authentication',
            'Information Disclosure: Sensitive data exposure risks',
            'Access Controls: Authentication and authorization mechanisms'
        ];

        if (scanType === 'passive') {
            areas.push('Information Leakage: Public information exposure');
            areas.push('DNS Security: Domain and subdomain configuration');
        }

        return areas.map(area => `• ${area}`).join('\n');
    },

    generateLocationAnalysis(findings, scanType) {
        if (scanType === 'passive') {
            return `
• Certificate Transparency Logs: Subdomain and certificate information
• DNS Records: Infrastructure and service discovery
• Public Databases: Shodan, search engines, OSINT sources
• Web Crawling: Publicly accessible endpoints and directories
• WHOIS Data: Domain registration and contact information
            `;
        } else {
            return `
• Network Layer: Open ports and running services
• Application Layer: Web applications and API endpoints
• SSL/TLS Configuration: Certificate and encryption analysis
• Directory Structure: Hidden files and administrative interfaces
• Service Banners: Version information and service details
            `;
        }
    },

    generateBusinessImpact(findings) {
        const critical = findings.filter(f => f.impact === 'Critical').length;
        
        if (critical > 0) {
            return `
HIGH BUSINESS IMPACT: Critical vulnerabilities could result in:
• Data breach and regulatory compliance violations
• Financial losses from system downtime
• Reputation damage and customer trust issues
• Potential legal liability and regulatory fines
            `;
        } else {
            return `
MODERATE BUSINESS IMPACT: Identified issues could lead to:
• Increased security risk over time
• Potential for future exploitation
• Compliance gap concerns
• Operational efficiency impacts
            `;
        }
    },

    generateActionItems(findings) {
        const items = [
            '1. Review and prioritize all findings by risk level',
            '2. Assign remediation tasks to appropriate teams',
            '3. Establish timeline for addressing critical issues',
            '4. Update security policies and procedures',
            '5. Schedule follow-up assessment in 30-60 days'
        ];

        const critical = findings.filter(f => f.impact === 'Critical').length;
        if (critical > 0) {
            items.unshift('0. URGENT: Address critical vulnerabilities within 24-48 hours');
        }

        return items.join('\n');
    },

    generateConclusion(findings, scanType) {
        const total = findings.length;
        if (total === 0) {
            return 'The security assessment indicates a strong security posture with no significant vulnerabilities identified. Continue current security practices and conduct regular assessments.';
        } else if (total < 5) {
            return 'The assessment reveals a generally good security posture with minor issues that can be addressed through standard security practices. Regular monitoring and updates are recommended.';
        } else {
            return 'The assessment has identified several areas for security improvement. While the findings are manageable, prompt attention to the recommendations will significantly enhance the overall security posture.';
        }
    },

    getDetailedDescription(finding, scanType) {
        const descriptions = {
            'Certificate Transparency': 'SSL certificates found in public CT logs revealing infrastructure details',
            'DNS Enumeration': 'DNS records exposing internal network structure and services',
            'Subdomain Bruteforce': 'Additional subdomains discovered through active enumeration',
            'Port Scanning': 'Open network ports identified that may expose services to attackers',
            'Web Crawling': 'Web endpoints and directories discovered through automated crawling',
            'SSL Analysis': 'SSL/TLS configuration analysis revealing encryption weaknesses',
            'Security Analysis': 'Comprehensive security posture assessment and risk evaluation'
        };
        return descriptions[finding.type] || 'Security finding requiring review and potential remediation';
    },

    getLocationInfo(finding, scanType) {
        if (scanType === 'passive') {
            return 'Discovered through passive reconnaissance techniques (no direct target interaction)';
        } else {
            return 'Identified through active security testing (direct target interaction)';
        }
    },

    getRecommendation(finding) {
        const recommendations = {
            'Critical': 'Immediate remediation required - address within 24-48 hours',
            'High': 'High priority remediation - address within 1-2 weeks',
            'Medium': 'Planned remediation - address within 30 days',
            'Low': 'Informational - review and document for future reference'
        };
        return recommendations[finding.impact] || 'Review finding and implement appropriate security controls';
    },

    getTimelineRecommendation(riskLevel) {
        const timelines = {
            'CRITICAL': 'Immediate action required (24-48 hours)',
            'HIGH': 'Urgent remediation needed (1-2 weeks)',
            'MEDIUM': 'Planned remediation (30 days)',
            'LOW': 'Standard security review cycle (60-90 days)'
        };
        return timelines[riskLevel] || '30 days';
    },

    showReportModal(title, content, reportType) {
        const modal = document.createElement('div');
        modal.className = 'report-modal-overlay';
        modal.innerHTML = `
            <div class="report-modal">
                <div class="report-header">
                    <h3>📋 ${title}</h3>
                    <button class="report-close" onclick="this.closest('.report-modal-overlay').remove()">×</button>
                </div>
                <div class="report-content">
                    <pre>${content}</pre>
                </div>
                <div class="report-buttons">
                    <button class="btn btn-success" onclick="ReportGenerator.downloadReport('${reportType}', \`${content.replace(/`/g, '\\`')}\`)">
                        📥 Download TXT
                    </button>
                    <button class="btn btn-danger" onclick="ReportGenerator.downloadPDF('${reportType}', \`${content.replace(/`/g, '\\`')}\`)">
                        📄 Download PDF
                    </button>
                    <button class="btn btn-info" onclick="ReportGenerator.copyToClipboard(\`${content.replace(/`/g, '\\`')}\`)">
                        📋 Copy to Clipboard
                    </button>
                    <button class="btn btn-secondary" onclick="this.closest('.report-modal-overlay').remove()">
                        Close
                    </button>
                </div>
            </div>
        `;

        // Add modal styles
        modal.style.cssText = `
            position: fixed; top: 0; left: 0; width: 100%; height: 100%;
            background: rgba(0,0,0,0.8); z-index: 3000;
            display: flex; align-items: center; justify-content: center;
            animation: fadeIn 0.3s ease-out;
        `;

        document.body.appendChild(modal);
    },

    downloadReport(reportType, content) {
        const filename = `AnujScan-${reportType}-${new Date().toISOString().split('T')[0]}.txt`;
        const blob = new Blob([content], { type: 'text/plain' });
        const url = window.URL.createObjectURL(blob);
        
        const a = document.createElement('a');
        a.href = url;
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        window.URL.revokeObjectURL(url);
        
        showAlert(`📥 Report downloaded as ${filename}`, 'success');
    },

    copyToClipboard(content) {
        navigator.clipboard.writeText(content).then(() => {
            showAlert('📋 Report copied to clipboard!', 'success');
        }).catch(() => {
            showAlert('❌ Failed to copy to clipboard', 'error');
        });
    },
    
    downloadPDF(reportType, content) {
        try {
            // Create PDF using jsPDF
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();
            
            // Set font and margins
            doc.setFont('courier');
            doc.setFontSize(10);
            
            const pageWidth = doc.internal.pageSize.getWidth();
            const pageHeight = doc.internal.pageSize.getHeight();
            const margin = 20;
            const lineHeight = 4;
            const maxLineWidth = pageWidth - (margin * 2);
            
            // Split content into lines
            const lines = content.split('\n');
            let yPosition = margin;
            
            // Add title
            doc.setFontSize(14);
            doc.setFont('helvetica', 'bold');
            doc.text('ANUJSCAN PRO ULTIMATE - SECURITY REPORT', margin, yPosition);
            yPosition += 10;
            
            doc.setFontSize(10);
            doc.setFont('courier', 'normal');
            
            lines.forEach(line => {
                // Handle long lines by wrapping
                const wrappedLines = doc.splitTextToSize(line, maxLineWidth);
                
                wrappedLines.forEach(wrappedLine => {
                    // Check if we need a new page
                    if (yPosition > pageHeight - margin) {
                        doc.addPage();
                        yPosition = margin;
                    }
                    
                    doc.text(wrappedLine, margin, yPosition);
                    yPosition += lineHeight;
                });
            });
            
            // Save the PDF
            const filename = `AnujScan-${reportType}-${new Date().toISOString().split('T')[0]}.pdf`;
            doc.save(filename);
            
            showAlert(`📄 PDF report downloaded as ${filename}`, 'success');
            
        } catch (error) {
            // Fallback if jsPDF is not available
            console.error('PDF generation failed:', error);
            showAlert('❌ PDF generation failed - downloading as TXT instead', 'warning');
            this.downloadReport(reportType, content);
        }
    }
};

// Add report modal CSS
const reportStyle = document.createElement('style');
reportStyle.textContent = `
.report-modal {
    background: white;
    border-radius: 12px;
    max-width: 90vw;
    max-height: 90vh;
    display: flex;
    flex-direction: column;
    box-shadow: 0 20px 60px rgba(0,0,0,0.3);
}

.report-header {
    background: linear-gradient(135deg, #28a745, #20c997);
    color: white;
    padding: 20px;
    border-radius: 12px 12px 0 0;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.report-header h3 {
    margin: 0;
    font-size: 18px;
}

.report-close {
    background: none;
    border: none;
    color: white;
    font-size: 24px;
    cursor: pointer;
    padding: 0;
    width: 30px;
    height: 30px;
}

.report-content {
    padding: 20px;
    overflow-y: auto;
    flex: 1;
    max-height: 60vh;
}

.report-content pre {
    white-space: pre-wrap;
    font-family: 'Courier New', monospace;
    font-size: 12px;
    line-height: 1.4;
    color: #333;
    margin: 0;
}

.report-buttons {
    padding: 20px;
    border-top: 1px solid #eee;
    display: flex;
    gap: 10px;
    justify-content: flex-end;
    flex-wrap: wrap;
}
`;
document.head.appendChild(reportStyle);