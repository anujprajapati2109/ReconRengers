// Pentest Training Integration - TryHackMe & Hack The Box
const PentestTraining = {
    
    async executePentestTraining(target, addResult) {
        addResult('🎓 PENTEST TRAINING INTEGRATION', 'info');
        addResult(`Session: ${new Date().toISOString()}`, 'info');
        addResult('=' .repeat(60), 'info');

        // Phase 1: TryHackMe Integration
        await this.tryHackMeIntegration(addResult);
        
        // Phase 2: Hack The Box Integration
        await this.hackTheBoxIntegration(addResult);
        
        // Phase 3: Training Progress Tracker
        await this.trainingProgressTracker(addResult);
        
        // Phase 4: Pentest Tool Launcher
        await this.pentestToolLauncher(addResult);
        
        addResult('=' .repeat(60), 'info');
        addResult('PENTEST TRAINING SESSION READY', 'info');
    },

    async tryHackMeIntegration(addResult) {
        addResult('🟢 TRYHACKME INTEGRATION', 'info');
        
        const thmRooms = [
            { name: 'Basic Pentesting', slug: 'basicpentestingjt', difficulty: 'Easy', category: 'Pentesting' },
            { name: 'Vulnversity', slug: 'vulnversity', difficulty: 'Easy', category: 'Web' },
            { name: 'Blue', slug: 'blue', difficulty: 'Easy', category: 'Windows' },
            { name: 'Ice', slug: 'ice', difficulty: 'Easy', category: 'Windows' },
            { name: 'Metasploit', slug: 'rpmetasploit', difficulty: 'Easy', category: 'Exploitation' },
            { name: 'Nmap', slug: 'furthernmap', difficulty: 'Medium', category: 'Reconnaissance' },
            { name: 'OWASP Top 10', slug: 'owasptop10', difficulty: 'Easy', category: 'Web' },
            { name: 'Burp Suite', slug: 'rpburpsuite', difficulty: 'Easy', category: 'Web' },
            { name: 'Hydra', slug: 'hydra', difficulty: 'Easy', category: 'Brute Force' },
            { name: 'John The Ripper', slug: 'johntheripper0', difficulty: 'Easy', category: 'Cracking' }
        ];
        
        addResult('📚 Available TryHackMe Rooms:', 'info');
        thmRooms.forEach((room, index) => {
            const difficultyColor = room.difficulty === 'Easy' ? 'low' : 
                                  room.difficulty === 'Medium' ? 'medium' : 'high';
            addResult(`   ${index + 1}. ${room.name} (${room.difficulty}) - ${room.category}`, difficultyColor);
        });
        
        addResult('🚀 Quick Launch Commands:', 'info');
        addResult('   • Click room number to open in new tab', 'info');
        addResult('   • Progress automatically tracked', 'info');
        
        // Create clickable room links
        this.createTHMRoomLinks(thmRooms, addResult);
    },

    async hackTheBoxIntegration(addResult) {
        addResult('🟠 HACK THE BOX INTEGRATION', 'info');
        
        const htbMachines = [
            { name: 'Lame', difficulty: 'Easy', os: 'Linux', category: 'Classic' },
            { name: 'Legacy', difficulty: 'Easy', os: 'Windows', category: 'Classic' },
            { name: 'Blue', difficulty: 'Easy', os: 'Windows', category: 'Classic' },
            { name: 'Devel', difficulty: 'Easy', os: 'Windows', category: 'Web' },
            { name: 'Jerry', difficulty: 'Easy', os: 'Windows', category: 'Web' },
            { name: 'Netmon', difficulty: 'Easy', os: 'Windows', category: 'Monitoring' },
            { name: 'Beep', difficulty: 'Easy', os: 'Linux', category: 'VoIP' },
            { name: 'Optimum', difficulty: 'Easy', os: 'Windows', category: 'Web' },
            { name: 'Bastard', difficulty: 'Medium', os: 'Windows', category: 'CMS' },
            { name: 'Granny', difficulty: 'Easy', os: 'Windows', category: 'Web' }
        ];
        
        addResult('🎯 Available HTB Machines:', 'info');
        htbMachines.forEach((machine, index) => {
            const difficultyColor = machine.difficulty === 'Easy' ? 'low' : 
                                   machine.difficulty === 'Medium' ? 'medium' : 'high';
            addResult(`   ${index + 1}. ${machine.name} (${machine.difficulty}) - ${machine.os} ${machine.category}`, difficultyColor);
        });
        
        addResult('🔧 HTB Tools Integration:', 'info');
        addResult('   • VPN connection helper', 'info');
        addResult('   • Machine reset automation', 'info');
        addResult('   • Flag submission tracker', 'info');
        
        this.createHTBMachineLinks(htbMachines, addResult);
    },

    async trainingProgressTracker(addResult) {
        addResult('📊 TRAINING PROGRESS TRACKER', 'info');
        
        // Load existing progress from localStorage
        const progress = this.loadTrainingProgress();
        
        addResult('🎯 Current Progress:', 'info');
        addResult(`   • TryHackMe Rooms Completed: ${progress.thm.completed}`, 'info');
        addResult(`   • HTB Machines Rooted: ${progress.htb.rooted}`, 'info');
        addResult(`   • Total Study Hours: ${progress.totalHours}`, 'info');
        addResult(`   • Current Streak: ${progress.streak} days`, 'info');
        
        // Calculate skill levels
        const skillLevels = this.calculateSkillLevels(progress);
        addResult('🏆 Skill Levels:', 'info');
        Object.entries(skillLevels).forEach(([skill, level]) => {
            const levelColor = level >= 80 ? 'high' : level >= 60 ? 'medium' : 'low';
            addResult(`   • ${skill}: ${level}%`, levelColor);
        });
        
        // Set learning goals
        addResult('🎯 Recommended Next Steps:', 'info');
        const recommendations = this.getTrainingRecommendations(progress);
        recommendations.forEach(rec => {
            addResult(`   • ${rec}`, 'medium');
        });
    },

    async pentestToolLauncher(addResult) {
        addResult('🛠️ PENTEST TOOL LAUNCHER', 'info');
        
        const tools = [
            { name: 'Nmap', command: 'nmap -sV -sC target', category: 'Reconnaissance' },
            { name: 'Gobuster', command: 'gobuster dir -u http://target -w wordlist.txt', category: 'Web' },
            { name: 'Nikto', command: 'nikto -h http://target', category: 'Web' },
            { name: 'SQLMap', command: 'sqlmap -u "http://target/page?id=1" --dbs', category: 'Web' },
            { name: 'Hydra', command: 'hydra -l admin -P passwords.txt target ssh', category: 'Brute Force' },
            { name: 'John', command: 'john --wordlist=rockyou.txt hashes.txt', category: 'Cracking' },
            { name: 'Metasploit', command: 'msfconsole', category: 'Exploitation' },
            { name: 'Burp Suite', command: 'burpsuite', category: 'Web' },
            { name: 'Wireshark', command: 'wireshark', category: 'Network' },
            { name: 'Hashcat', command: 'hashcat -m 0 -a 0 hashes.txt rockyou.txt', category: 'Cracking' }
        ];
        
        addResult('⚡ Available Tools:', 'info');
        tools.forEach((tool, index) => {
            addResult(`   ${index + 1}. ${tool.name} - ${tool.category}`, 'info');
            addResult(`      Command: ${tool.command}`, 'low');
        });
        
        addResult('💡 Tool Usage Tips:', 'info');
        addResult('   • Always get proper authorization before testing', 'critical');
        addResult('   • Use VPN when connecting to HTB/THM', 'high');
        addResult('   • Document all findings and methodologies', 'medium');
        addResult('   • Practice on legal targets only', 'critical');
    },

    createTHMRoomLinks(rooms, addResult) {
        addResult('🔗 TryHackMe Room Links:', 'info');
        rooms.forEach((room, index) => {
            const roomUrl = `https://tryhackme.com/room/${room.slug}`;
            addResult(`   ${index + 1}. Open ${room.name}: ${roomUrl}`, 'info');
        });
        
        // Store room data for progress tracking
        localStorage.setItem('thm_rooms', JSON.stringify(rooms));
    },

    createHTBMachineLinks(machines, addResult) {
        addResult('🔗 Hack The Box Machine Links:', 'info');
        machines.forEach((machine, index) => {
            const machineUrl = `https://app.hackthebox.com/machines/${machine.name.toLowerCase()}`;
            addResult(`   ${index + 1}. Access ${machine.name}: ${machineUrl}`, 'info');
        });
        
        // Store machine data for progress tracking
        localStorage.setItem('htb_machines', JSON.stringify(machines));
    },

    loadTrainingProgress() {
        const defaultProgress = {
            thm: { completed: 0, inProgress: 0 },
            htb: { rooted: 0, user: 0 },
            totalHours: 0,
            streak: 0,
            lastActivity: null
        };
        
        try {
            const saved = localStorage.getItem('training_progress');
            return saved ? JSON.parse(saved) : defaultProgress;
        } catch {
            return defaultProgress;
        }
    },

    calculateSkillLevels(progress) {
        return {
            'Web Application': Math.min(100, (progress.thm.completed * 5) + (progress.htb.rooted * 10)),
            'Network Penetration': Math.min(100, (progress.thm.completed * 3) + (progress.htb.rooted * 15)),
            'Exploitation': Math.min(100, (progress.htb.rooted * 20) + (progress.thm.completed * 2)),
            'Post-Exploitation': Math.min(100, (progress.htb.rooted * 25) + (progress.thm.completed * 1)),
            'Reconnaissance': Math.min(100, (progress.thm.completed * 4) + (progress.htb.rooted * 8))
        };
    },

    getTrainingRecommendations(progress) {
        const recommendations = [];
        
        if (progress.thm.completed < 5) {
            recommendations.push('Complete basic TryHackMe rooms (Vulnversity, Basic Pentesting)');
        }
        
        if (progress.htb.rooted < 3) {
            recommendations.push('Root easy HTB machines (Lame, Legacy, Blue)');
        }
        
        if (progress.totalHours < 50) {
            recommendations.push('Increase study time - aim for 2-3 hours daily');
        }
        
        if (progress.streak < 7) {
            recommendations.push('Build consistent daily practice habit');
        }
        
        recommendations.push('Document methodologies and create personal notes');
        recommendations.push('Join Discord communities for support and discussion');
        
        return recommendations;
    },

    updateProgress(platform, activity) {
        const progress = this.loadTrainingProgress();
        
        if (platform === 'thm') {
            progress.thm.completed++;
        } else if (platform === 'htb') {
            progress.htb.rooted++;
        }
        
        progress.lastActivity = new Date().toISOString();
        localStorage.setItem('training_progress', JSON.stringify(progress));
    }
};

window.PentestTraining = PentestTraining;